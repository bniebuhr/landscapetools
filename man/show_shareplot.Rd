% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/show_shareplot.R
\name{show_shareplot}
\alias{show_shareplot}
\title{show_shareplot}
\usage{
show_shareplot(
  landscape,
  points,
  buffer_width,
  max_width = NULL,
  multibuffer_df = NULL,
  return_df = FALSE
)

show_shareplot(
  landscape,
  points,
  buffer_width,
  max_width = NULL,
  multibuffer_df = NULL,
  return_df = FALSE
)
}
\arguments{
\item{landscape}{Raster* object}

\item{points}{Point(s) represented by a two-column matrix or data.frame; SpatialPoints*; SpatialPolygons*; SpatialLines; Extent; a numeric vector representing cell numbers; or sf* POINT object}

\item{buffer_width}{Buffer widths in which landscape share is measured.
By default, it is a vector of buffer sizes, if \code{max_width = NULL}.
If a value if provided for \code{max_width}, a series of buffer sizes is created,
from \code{buffer_width} to \code{max_width}, with increases of \code{buffer_width}.}

\item{max_width}{Max distance to which buffer_width is summed up; the x axis in the plot}

\item{multibuffer_df}{\code{data.frame} with landscape share or a function from it already extracted, such as
through the \code{\link[=util_extract_buffer]{util_extract_buffer()}} function. If given, the other arguments
(\code{landscape}, \code{points}, \code{buffer_width}, \code{max_width}) are ignored. Default is NULL.}

\item{return_df}{Logical value indicating if a tibble with the underlying data should be returned}
}
\value{
ggplot2 Object
}
\description{
Plot the landscape share in subsequential buffers around a/multiple point(s) of interest
}
\examples{
# create single point
new_point = matrix(c(75,75), ncol = 2)

# show landscape and point of interest
show_landscape(classified_landscape, discrete = TRUE) +
ggplot2::geom_point(data = data.frame(x = new_point[,1], y = new_point[,2]),
                    ggplot2::aes(x = x, y = y),
                    col = "grey", size = 3)

# show single point share
show_shareplot(classified_landscape, new_point, 10, 50)

# show multiple points share
new_points = matrix(c(75, 110, 75, 30), ncol = 2)
show_shareplot(classified_landscape, new_points, 10, 50)

# irregular buffer widths
new_points = matrix(c(75, 110, 75, 30), ncol = 2)
show_shareplot(classified_landscape, new_points, c(10, 30, 50))

# get data frame with results back
result <- show_shareplot(classified_landscape, new_points, 10, 50, return_df = TRUE)
result$share_df

# use the output from util_extract_multibuffer
new_points = matrix(c(75, 110, 75, 30), ncol = 2)
df = util_extract_multibuffer(classified_landscape, new_points, 10, 50)
show_shareplot(multibuffer_df = df)

}
